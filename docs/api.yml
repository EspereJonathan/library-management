openapi: 3.0.3
info:
  title: Library API
  version: 1.1.0
  description: STD21010
servers:
  - url: https://library.com
paths:
  /books:
    get:
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseFrom 
          description: Filter books before a date 
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: releaseTo
          description: Filter books after a date 
          required: false
          schema:
            type: string
            format: date              
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /authors:
    get:
      tags:
        - Authors
      summary: Get all authors
      parameters:
        - name: authorName 
          in: query
          description: Filter return author by given name
          required: false
          schema:
            type: string
      responses:
        200:
          description: The list of filtered authors 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'  
    put:
      tags:
        - Authors 
      summary: Create or update a list of Authors 
      operationId: crupdateAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateBooks'
      responses:
        200:
          description: The list of created or updated Authors 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    delete:
      tags:
        - Authors
      summary: delete one author by the given id 
      parameters:
        - name: authorId 
          in: query
          description: id of the author to delete 
          required: true 
          schema:
            type: string
      responses:
        200:
          description: The author that have been deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
  /Topic:
    get:
      tags:
        - Topic
      summary: Get all topic
      parameters:
        - name: topicName 
          in: query
          description: Filter return topic by given name
          required: false
          schema:
            type: string
      responses:
        200:
          description: The list of filtered topics
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topic'  
    put:
      tags:
        - Topic 
      summary: Create or update a list of Topics 
      operationId: crupdateTopics
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Topic'
      responses:
        200:
          description: The list of created or updated Topics 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topic'
    delete:
      tags:
        - Topic
      summary: delete one topic by the given id 
      parameters:
        - name: topicId 
          in: query
          description: id of the topic to delete 
          required: true 
          schema:
            type: string
      responses:
        200:
          description: The topic that have been deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'                                                    
components:
  schemas:
    Author: 
      type: object
      properties:
        id:
          type: string
        name: 
          type: string
        sex:
          type: string
          enum:
            - M
            - F  
    Book:
      allOf:
        - $ref: "#/components/schemas/CrupdateBooks"
        - type: object
      properties:
        author:
          $ref: "#/components/schemas/Author"
        topic:
          $ref: "#/components/schemas/Topic"
    CrupdateBooks:
        type: object
        properties:
          id: 
            type: string
          bookName:
            type: string
          pageNumbers:
            type: integer
          releaseDate:
            type: string
            format: date
    Topic: 
        type: object
        properties:
          id:
            type: string
          topicName:
            type: string
            example:
              - ROMANCE
              - COMEDY
              - OTHER