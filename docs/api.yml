openapi: 3.0.3
info:
  title: Library API
  version: 1.1.0
  description: STD21010
servers:
  - url: https://library.com
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - $ref: '#/components/parameters/queryPagination'
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseFrom 
          description: Filter books before a date 
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: releaseTo
          description: Filter books after a date 
          required: false
          schema:
            type: string
            format: date              
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /authors:
    get:
      tags:
        - Authors
      summary: Get all authors
      parameters:
        - $ref: '#/components/parameters/queryPagination' 
        - name: authorName 
          in: query
          description: Filter return author by given name
          required: false
          schema:
            type: string
      responses:
        200:
          description: The list of filtered authors 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'  
    put:
      tags:
        - Authors 
      summary: Create or update a list of Authors 
      operationId: crupdateAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateBooks'
      responses:
        200:
          description: The list of created or updated Authors 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    delete:
      tags:
        - Authors
      summary: delete one author by the given id 
      parameters:
        - name: authorId 
          in: query
          description: id of the author to delete 
          required: true 
          schema:
            type: string
      responses:
        200:
          description: The author that have been deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
  /Topic:
    get:
      tags:
        - Topic
      summary: Get all topic
      parameters:
        - name: topicName 
          in: query
          description: Filter return topic by given name
          required: false
          schema:
            type: string
      responses:
        200:
          description: The list of filtered topics
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topic'                  
    put:
      tags:
        - Topic 
      summary: Create or update a list of Topics 
      operationId: crupdateTopics
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Topic'
      responses:
        200:
          description: The list of created or updated Topics 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topic'
    delete:
      tags:
        - Topic
      summary: delete one topic by the given id 
      parameters:
        - name: topicId 
          in: query
          description: id of the topic to delete 
          required: true 
          schema:
            type: string
      responses:
        200:
          description: The topic that have been deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'                   
  /books/{booksId}/topics/{topicId}:
    put:
      tags:
        - Topic 
      summary: Create or update a list of book and topic by id
      operationId: crupdateBooksTopics
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/BookTopic'
      responses:
        200:
          description: The list of created or updated Books and Topics by id  
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookTopic'                                   
  /books/topics/:
    put:
      tags:
        - Topic
      summary: Create or update a list of books with topic
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books with topics
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /authors/import:
    post:
      tags:
        - Author
      summary: Import authors from Excel or JSON
      operationId: importAuthors
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ImportAuthor'
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              type: string
              description: Fichier Excel (XLSX) pour l'importation d'auteurs
      responses:
        200:
          description: Liste des auteurs importés
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
  /books/import:
    post:
      tags:
        - Book
      summary: Import books from Excel or JSON
      operationId: importBooks
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ImportBook'
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              type: string  
              description: Fichier Excel (XLSX) pour l'importation de livres
      responses:
        200:
          description: Liste des livres importés
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'                                                                                                                         
components:
  parameters:
    pathPagination:
      in: query
      name: pathPagination
      description: Object for path pagination
      required: false
      schema:
        type: object
        properties:
          page:
            type: integer
            default: 1
          pageSize:
            type: integer
            default: 50
    queryPagination:
      in: query
      name: queryPagination
      description: Object for query pagination
      required: false
      schema:
        type: object
        properties:
          page:
            type: integer
            default: 1
          pageSize:
            type: integer
            default: 50
  responses:
        baseResponse:
          description: Réponse de base pour toutes les réponses
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: object
                    properties:
                      code:
                        type: integer
                        description: Code de statut
                      message:
                        type: string
                        description: Message
                  body:
                    type: object
                    description: Contenu de la réponse

        successResponse:
          description: Réponse 200 (Success)
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/responses/baseResponse'
                  - type: object
                    properties:
                      status:
                        properties:
                          code:
                            type: integer
                            description: Code de statut
                          message:
                            type: string
                            description: Message
                      body:
                        type: object
                        description: Contenu de la réponse 200

        badRequestResponse:
          description: Réponse 400 (Bad Request)
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/responses/baseResponse'
                  - type: object
                    properties:
                      status:
                        properties:
                          code:
                            type: integer
                            description: Code de statut
                          message:
                            type: string
                            description: Message
                      body:
                        type: object
                        description: Contenu de la réponse 400

        forbiddenResponse:
          description: Réponse 403 (Forbidden)
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/responses/baseResponse'
                  - type: object
                    properties:
                      status:
                        properties:
                          code:
                            type: integer
                            description: Code de statut
                          message:
                            type: string
                            description: Message
                      body:
                        type: object
                        description: Contenu de la réponse 403

        serverErrorResponse:
          description: Réponse 500 (Server Error)
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/responses/baseResponse'
                  - type: object
                    properties:
                      status:
                        properties:
                          code:
                            type: integer
                            description: Code de statut
                          message:
                            type: string
                            description: Message
                      body:
                        type: object
                        description: Contenu de la réponse 500
  schemas:
    Author: 
      type: object
      properties:
        id:
          type: string
        name: 
          type: string
        sex:
          type: string
          enum:
            - M
            - F  
    Book:
      allOf:
        - $ref: "#/components/schemas/CrupdateBooks"
        - type: object
      properties:
        author:
          $ref: "#/components/schemas/Author"
        topic:
          $ref: "#/components/schemas/Topic"
    CrupdateBooks:
        type: object
        properties:
          id: 
            type: string
          bookName:
            type: string
          pageNumbers:
            type: integer
          releaseDate:
            type: string
            format: date
    Topic: 
        type: object
        properties:
          id:
            type: string
          topicName:
            type: string
            example:
              - ROMANCE
              - COMEDY
              - OTHER
    BookTopic:
        type: object
        properties:
          booksId:
            type: string
          topicsId:
            type: string
    ImportAuthor:
      type: object
      properties:
        authorName:
          type: string
        sex:
          type: string
          enum:
            - M
            - F

    ImportBook:
      type: object
      properties:
        bookName:
          type: string
        author:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
        idAuthor:
          type: string            